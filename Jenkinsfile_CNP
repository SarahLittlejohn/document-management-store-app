#!groovy

properties([
    [
        $class: 'GithubProjectProperty',
        displayName: 'Document Management Store App',
        projectUrlStr: 'https://github.com/hmcts/document-management-store-app'
    ],
    parameters([
        booleanParam(
            defaultValue: false,
            description: 'Run Performance',
            name: 'RUN_PT'
        )
    ]),
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "dm"
def component = "store-app"

def channel = '#dm-pipeline'

withPipeline(type , product, component) {
    enableSlackNotifications(channel)
    //enableDbMigration()

    after('checkout') {
        echo '${product}-${component} out'
    }

    after('build'){
        sh "cp -r src/main/resources/ application/src/main/resources/"
    }

    after('test'){
//            junit 'application/build/test-results/test/**/*.xml'
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "application/build/reports/tests/test/",
            reportFiles          : 'index.html',
            reportName           : 'Unit Test Report'
        ])

        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "application/build/reports/checkstyle/",
            reportFiles          : 'main.html',
            reportName           : 'Checkstyle Main Report'
        ])
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "application/build/reports/checkstyle/",
            reportFiles          : 'test.html',
            reportName           : 'Checkstyle Test Report'
        ])
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "application/build/reports/pmd/",
            reportFiles          : 'main.html',
            reportName           : 'PMD Main Report'
        ])
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "application/build/reports/pmd/",
            reportFiles          : 'test.html',
            reportName           : 'PMD Test Report'
        ])

        try {
            sh './gradlew jacocoTestReport --info'
        }finally {
            jacoco(execPattern: 'application/build/jacoco/test.exec', buildOverBuild: false,
                exclusionPattern: '**/test/*, ' +
                    '**/uk/gov/hmcts/dm/DmApp.java,'+
                    '**/uk/gov/hmcts/dm/hateos/*,'+
                    '**/uk/gov/hmcts/dm/exception/*,'+
                    '**/uk/gov/hmcts/dm/domain/*,'+
                    '**/uk/gov/hmcts/dm/commandobject/*,'+
                    '**/uk/gov/hmcts/dm/hibernate/*,'+
                    '**/uk/gov/hmcts/dm/config/**/*,'+
                    '**/uk/gov/hmcts/dm/errorhandler/*,'+
                    '**/uk/gov/hmcts/dm/repository/RepositoryFinder.java')
            publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "application/build/reports/jacoco/test/html/",
                reportFiles          : 'index.html',
                reportName           : 'Jacoco Coverage Report'
            ])
        }
    }

    after('smoketest:aat') {
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "smokeTests/build/reports/tests/smoke/",
            reportFiles          : 'index.html',
            reportName           : 'Dev Smoke Test'
        ])
    }

//    before("functionalTest:aat"){
//        env.DM_STORE_APP_URL = tfOutput?.dm_store_url?.value
//    }

    after('functionalTest:aat') {
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functionalTests/build/reports/tests/functional/",
            reportFiles          : 'index.html',
            reportName           : 'Dev Functional Test'
        ])

        if (params.RUN_PT) {
//      Performance Test
            sh './gradlew gatlingRun'
            gatlingArchive()
        }
    }

    after('smoketest:prod'){
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "smokeTests/build/reports/tests/smoke/",
            reportFiles          : 'index.html',
            reportName           : 'Prod Smoke Test'
        ])
    }
}
